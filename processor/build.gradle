apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: "com.github.ben-manes.versions"
apply plugin: 'maven'

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

dependencies {
    implementation project(':api')
    compileOnly project(':processor-coroutines')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$kotlinxSerializationVersion"
    implementation ("com.github.kittinunf.fuel:fuel:$fuelVersion"){
        exclude group: 'org.jetbrains.kotlin'
    }
    implementation ("com.github.kittinunf.fuel:fuel-kotlinx-serialization:$fuelVersion"){
        exclude group: 'org.jetbrains.kotlinx'
    }
    implementation ("com.squareup:kotlinpoet:$kotlinpoetVersion"){
        exclude group: 'org.jetbrains.kotlin'
    }

    testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spekVersion") {
        //exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }

    testImplementation project(':processor-coroutines')
    testImplementation project(':processor-gson')

    testImplementation ("com.github.kittinunf.fuel:fuel:$fuelVersion"){
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation ("com.github.kittinunf.fuel:fuel-kotlinx-serialization:$fuelVersion"){
        exclude group: 'org.jetbrains.kotlinx'
    }
    testImplementation ("com.github.kittinunf.fuel:fuel-coroutines:$fuelVersion"){
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation ("org.jetbrains.kotlinx:kotlinx-serialization-core:$kotlinxSerializationVersion"){
        exclude group: 'org.jetbrains.kotlin'
    }

    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-annotation-processing-embeddable:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation files(org.gradle.internal.jvm.Jvm.current().toolsJar)
    testImplementation ("com.squareup.okhttp3:mockwebserver:$mockwebserver"){
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation ("com.squareup.okio:okio:$okio"){
        exclude group: 'org.jetbrains.kotlin'
    }
}

group = 'com.github.alexxxdev.fuelcomfy'
archivesBaseName = 'processor'
version = '1.0.10'
description ="More comfortable use of Fuel as in Retrofit or Feign for Kotlin/Android"

sourceCompatibility = "8"
targetCompatibility = "8"

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/junitPlatformTest.exec")
        includeNoLocationClasses = true
    }
    jacocoTestReport {
        group = "Reporting"
        description = "Generate Jacoco coverage report."
        getClassDirectories().setFrom(
            fileTree(
                dir: "$buildDir/classes/kotlin/main",
            )
        )
        def coverageSourceDirs = [
                "src/main/kotlin",
                "../processor-coroutines/src/main/kotlin",
                "../processor-gson/src/main/kotlin",
                "../api/src/main/kotlin"
        ]
        getAdditionalClassDirs().from(
            files(["../processor-coroutines/build/classes/kotlin/main","../processor-gson/build/classes/kotlin/main","../api/build/classes/kotlin/main"])
        )
        getAdditionalSourceDirs().from(
            files(coverageSourceDirs)
        )
        getExecutionData().from(
            files("$buildDir/jacoco/junitPlatformTest.exec")
        )
        reports {
            xml.enabled = true
            html.enabled = true
            csv.enabled = true
        }
    }
}